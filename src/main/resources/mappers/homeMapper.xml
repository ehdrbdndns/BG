<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.BG.Mapper.HomeMapper">
    <select id="appRetrieveStoreInfoOfLatitude" parameterType="HomeDto" resultType="HomeDto">
        <![CDATA[
        SELECT User_No,

        (6371*acos(cos(radians(${Lat}))*cos(radians(User_Lat))*cos(radians(User_Lng)

        -radians(${Lng}))+sin(radians(${Lat}))*sin(radians(User_Lat))))

        AS distance

        FROM user

        HAVING distance <= ${Location_Range}

        ORDER BY distance, User_No

        LIMIT ${FirstIndex}, 10
        ]]>
    </select>

    <select id="appRetrieveShopListVerStore" parameterType="HomeDto" resultType="HomeDto">
        select s.Store_No, s.Store_Img, u.User_ComNm, u.User_Addr, s.Store_Category, u.User_RegDate, s.Store_Desc, s.Store_MainMenu
        FROM user u, store s
        WHERE u.User_No=${User_No} AND s.User_No=u.User_No AND s.Store_Category LIKE #{Ways} AND (u.User_ComNm LIKE #{Search} OR s.Store_MainMenu LIKE #{Search})
        AND EXISTS (select * from product p WHERE Product_Type=#{Category} AND s.Store_No=p.Store_No)
    </select>

    <select id="appRetrieveShopListVerSIS" parameterType="HomeDto" resultType="HomeDto">
        select sp.Shopin_No, sp.Shopin_Img, sp.Shopin_Name, u.User_Addr, sp.Shopin_Category, u.User_RegDate, st.Store_Desc, st.Store_No, sp.Shopin_MainMenu
        FROM user u, store st, shopin sp
        WHERE u.User_No=${User_No} AND st.User_No=u.User_No AND st.Store_No=sp.Store_No AND Shopin_Category LIKE #{Ways}
        AND (sp.Shopin_Name LIKE #{Search} OR sp.Shopin_MainMenu LIKE #{Search})
        LIMIT 1
    </select>

    <select id="getTodayVisitorCount" resultType="Integer">
        select count from user_visitor where date=#{date}
    </select>
    <select id="getAnywayVisitorCount" resultType="Integer">
        select sum(count) from user_visitor where date between date(#{startDate}) and date(#{endDate})
    </select>

    <select id="getTodayRegisterCount" resultType="Integer">
        select count(User_No) from user where User_RegDate=#{date}
    </select>
    <select id="getAnywayRegisterCount" resultType="Integer">
        select count(User_No) from user where User_RegDate between date(#{startDate}) and date(#{endDate})
    </select>
    <select id="getNewUserInfoList" resultType="UserDto">
        select * from user where User_RegDate=#{date}
    </select>
    <update id="appPlusLikeOfCommunity" parameterType="LikeDto">
        update community set Community_Likes = Community_Likes+1 where Community_No = ${Community_No}
    </update>
    <update id="appPlusLikeOfStore" parameterType="LikeDto">
        update store set Store_Likes = Store_Likes + 1 where Store_No = ${Store_No}
    </update>
    <update id="appMinusLikeOfCommunity" parameterType="LikeDto">
        update community set Community_Likes = Community_Likes - 1 where Community_No = ${Community_No}
    </update>
    <update id="appMinusLikeOfStore" parameterType="LikeDto">
        update store set Store_Likes = Store_Likes - 1 where Store_No = ${Store_No}
    </update>
    <delete id="appDeleteLikeOfCommunity" parameterType="LikeDto">
        delete from user_like where User_No=${User_No} AND Community_No=${Community_No}
    </delete>
    <delete id="appDeleteLikeOfStore" parameterType="LikeDto">
        delete from user_like where User_No=${User_No} AND Store_No=${Store_No}
    </delete>
    <insert id="appInsertLikeOfCommunity">
        insert into user_like(Like_Type, User_No, Community_No) VALUES (#{Like_Type}, ${User_No}, ${Community_No})
    </insert>
    <insert id="appInsertLikeOfStore">
        insert into user_like(Like_Type, User_No, Store_No) VALUES (#{Like_Type}, ${User_No}, ${Store_No})
    </insert>
    <select id="appIsClickLikeOfCommunity" parameterType="LikeDto" resultType="boolean">
        select EXISTS(select * from user_like where User_No=${User_No} AND Community_No=${Community_No})
    </select>
    <select id="appIsClickLikeOfStore" parameterType="LikeDto" resultType="boolean">
        select EXISTS(select * from user_like where User_No=${User_No} AND Store_No=${Store_No})
    </select>
</mapper>
